// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc696.RobotBuilderredemption.commands;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import java.io.IOException;
import java.io.InputStream;
import javax.microedition.io.Connector;
import javax.microedition.io.SocketConnection;
import org.usfirst.frc696.RobotBuilderredemption.Robot;
/**
 *
 */
public class  waitForHotGoal extends Command {
    SocketConnection sc;
    InputStream in;
    boolean gotValue = false;
    int timeToWait = 1;
    Timer timer = new Timer();
    
    public waitForHotGoal() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    // Called just before this Command runs the first time
    protected void initialize() {
       try{
        sc = (SocketConnection) Connector.open("socket://10.6.96.69:1180");
        in = sc.openInputStream();
        }catch(IOException e){}
        timer.start();
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
       if(!gotValue){
        try{
            in.read(Robot.driveTrain.hotness);
            System.out.println("got this number!:  "+ Robot.driveTrain.hotness[0]);
            if(Robot.driveTrain.hotness[0] == 0){
                timeToWait = 5;
            }
            gotValue = true;
            
        }catch(IOException e){System.out.println("failedToGet");}
      }
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        if(timer.get()>timeToWait){
        System.out.println("done!");
        return true;
        }
        return false;
    }
    // Called once after isFinished returns true
    protected void end() {
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
