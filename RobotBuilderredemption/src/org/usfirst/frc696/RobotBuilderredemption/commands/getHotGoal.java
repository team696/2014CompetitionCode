// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc696.RobotBuilderredemption.commands;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import java.io.IOException;
import java.io.InputStream;
import javax.microedition.io.Connector;
import javax.microedition.io.SocketConnection;
import org.usfirst.frc696.RobotBuilderredemption.Robot;
import org.usfirst.frc696.RobotBuilderredemption.UtilClasses.CheesyVisionServer;
/**
 *
 */
public class  getHotGoal extends Command {
   SocketConnection sc;
    InputStream in;
    boolean gotValue = false;
    Timer timer = new Timer();
       double timeToWait =0;
    public getHotGoal() {
        
        System.out.println("made get hot goal");
        timeToWait= 3.0;
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    public getHotGoal(double time){
        System.out.println("made get hot goal");
        timeToWait=time;
    }
    // Called just before this Command runs the first time
    protected void initialize() {
        timer.reset();
        timer.start();
        Robot.driveTrain.leftHot = Robot.driveTrain.server.getLeftStatus();
        gotValue = true;
        System.out.println(Robot.driveTrain.leftHot);
//        timeoutTimer.start();
//       try{
//        sc = (SocketConnection) Connector.open("socket://10.6.96.9:1180");
//        
//        in = sc.openInputStream();
//        }catch(IOException e){}
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        Robot.driveTrain.arcadeDrive(0, 0);
         System.out.println(Robot.driveTrain.leftHot + "  " + Robot.driveTrain.server.getLeftStatus()+ "  "+ Robot.driveTrain.server.getRightStatus());
//       if(!gotValue){
//        try{
//            System.out.println("looping");
//            in.read(Robot.driveTrain.hotness);
//            
//            System.out.println("got this number!:  "+ Robot.driveTrain.hotness[0]);
//            gotValue = true;
//            
//        }catch(Exception e){System.out.println("failedToGet");}
//      }
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        if(timer.get()>timeToWait){ return true;}
        else if(gotValue && Robot.driveTrain.leftHot) {
            return true;
        }
        else{
            return false;
        }
    }
    // Called once after isFinished returns true
    protected void end() {
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
