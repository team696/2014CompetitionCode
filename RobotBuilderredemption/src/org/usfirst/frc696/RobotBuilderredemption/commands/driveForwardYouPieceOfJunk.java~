// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc696.RobotBuilderredemption.commands;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc696.RobotBuilderredemption.Robot;
/**
 *
 */
public class  driveForwardYouPieceOfJunk extends Command {
    double distanceToDrive = 2.0;
    double speedToDrive =0.7;
    public driveForwardYouPieceOfJunk() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    // Called just before this Command runs the first time
    protected void initialize() {
        
        Robot.driveTrain.rightEncoder.reset();
        Robot.driveTrain.rightEncoder.start();
        
        Robot.driveTrain.leftEncoder.reset();
        Robot.driveTrain.leftEncoder.start();
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        Robot.driveTrain.tankDrive(speedToDrive, speedToDrive);
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        if(Robot.driveTrain.rightEncoder.get() + Robot.driveTrain.leftEncoder.get()> distanceToDrive){
            Robot.driveTrain.tankDrive(0, 0);
            return true;
        }
        return false;
    }
    // Called once after isFinished returns true
    protected void end() {
        Robot.driveTrain.tankDrive(0, 0);
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        end();
    }
}
